From 54c28ec59ec20d0b0a22b7188f11cc242b9371b4 Mon Sep 17 00:00:00 2001
From: Yifan Cai <ycai@apache.org>
Date: Tue, 15 Oct 2024 15:25:59 -0700
Subject: [PATCH] review

# Conflicts:
#	vertx-auth-mtls/src/main/java/io/vertx/ext/auth/authentication/CertificateCredentials.java
#	vertx-auth-mtls/src/test/java/io/vertx/ext/auth/authentication/CertificateCredentialsTest.java
---
 .../CertificateCredentials.java               | 53 ++++++++----
 .../mtls/CertificateIdentityExtractor.java    | 10 +--
 .../mtls/impl/CertificateValidatorImpl.java   | 14 +---
 .../impl/MutualTlsAuthenticationProvider.java |  2 +-
 .../mtls/impl/SpiffeIdentityExtractor.java    | 11 +--
 .../CertificateCredentialsTest.java           | 83 +++++++++++++++++++
 .../impl}/CertificateBuilder.java             |  2 +-
 .../impl}/CertificateValidatorImplTest.java   | 52 ++++--------
 .../impl}/MutualTlsAuthenticationTest.java    | 10 +--
 .../impl}/SpiffeIdentityExtractorTest.java    | 30 +++----
 .../test/mtls/CertificateCredentialsTest.java | 44 ----------
 11 files changed, 169 insertions(+), 142 deletions(-)
 create mode 100644 vertx-auth-mtls/src/test/java/io/vertx/ext/auth/authentication/CertificateCredentialsTest.java
 rename vertx-auth-mtls/src/test/java/io/vertx/ext/auth/{test/mtls => mtls/impl}/CertificateBuilder.java (99%)
 rename vertx-auth-mtls/src/test/java/io/vertx/ext/auth/{test/mtls => mtls/impl}/CertificateValidatorImplTest.java (58%)
 rename vertx-auth-mtls/src/test/java/io/vertx/ext/auth/{test/mtls => mtls/impl}/MutualTlsAuthenticationTest.java (95%)
 rename vertx-auth-mtls/src/test/java/io/vertx/ext/auth/{test/mtls => mtls/impl}/SpiffeIdentityExtractorTest.java (77%)
 delete mode 100644 vertx-auth-mtls/src/test/java/io/vertx/ext/auth/test/mtls/CertificateCredentialsTest.java

diff --git a/vertx-auth-mtls/src/main/java/io/vertx/ext/auth/authentication/CertificateCredentials.java b/vertx-auth-mtls/src/main/java/io/vertx/ext/auth/authentication/CertificateCredentials.java
index da85605b..1bc1ede1 100644
--- a/vertx-auth-mtls/src/main/java/io/vertx/ext/auth/authentication/CertificateCredentials.java
+++ b/vertx-auth-mtls/src/main/java/io/vertx/ext/auth/authentication/CertificateCredentials.java
@@ -19,6 +19,7 @@
 package io.vertx.ext.auth.authentication;
 
 import java.security.cert.Certificate;
+import java.security.cert.X509Certificate;
 import java.util.Collections;
 import java.util.List;
 
@@ -32,10 +33,33 @@ import io.vertx.core.json.JsonObject;
 public class CertificateCredentials implements Credentials
 {
     private final List<Certificate> certificateChain;
+    private final X509Certificate peerCertificate;
+
+    public CertificateCredentials(Certificate certificate)
+    {
+        this(Collections.singletonList(certificate));
+    }
 
     public CertificateCredentials(List<Certificate> certificateChain)
     {
         this.certificateChain = Collections.unmodifiableList(certificateChain);
+        this.peerCertificate = getPeerCertificate();
+    }
+
+    /**
+     * Create {@link CertificateCredentials} from {@link HttpServerRequest}
+     * @return CertificateCredentials
+     */
+    public static CertificateCredentials fromHttpRequest(HttpServerRequest request)
+    {
+        try
+        {
+            return new CertificateCredentials(request.connection().peerCertificates());
+        }
+        catch (Exception e)
+        {
+            throw new IllegalArgumentException("Could not extract certificates from request", e);
+        }
     }
 
     /**
@@ -46,6 +70,14 @@ public class CertificateCredentials implements Credentials
         return certificateChain;
     }
 
+    /**
+     * @return peer's certificate. It does not return null value once {@link #checkValid()} passes
+     */
+    public X509Certificate peerCertificate()
+    {
+        return peerCertificate;
+    }
+
     public void checkValid() throws CredentialValidationException
     {
         checkValid(this);
@@ -69,23 +101,14 @@ public class CertificateCredentials implements Credentials
         throw new UnsupportedOperationException("Deprecated authentication method");
     }
 
-    public static CertificateCredentials fromRequest(HttpServerRequest request)
-    {
-        return new CertificateCredentials(extractCertificateChain(request));
-    }
-
-    /**
-     * @return The certificate chain as a list of certificates
-     */
-    private static List<Certificate> extractCertificateChain(HttpServerRequest request)
+    private X509Certificate getPeerCertificate()
     {
-        try
+        // First certificate in the chain is peer's own cert
+        if (!certificateChain.isEmpty() && certificateChain.get(0) instanceof X509Certificate)
         {
-            return request.connection().peerCertificates();
-        }
-        catch (Exception e)
-        {
-            throw new InvalidCredentialException("Could not extract certificates from request", e);
+            return (X509Certificate) certificateChain.get(0);
         }
+
+        return null;
     }
 }
diff --git a/vertx-auth-mtls/src/main/java/io/vertx/ext/auth/mtls/CertificateIdentityExtractor.java b/vertx-auth-mtls/src/main/java/io/vertx/ext/auth/mtls/CertificateIdentityExtractor.java
index 955756f2..f2cf8994 100644
--- a/vertx-auth-mtls/src/main/java/io/vertx/ext/auth/mtls/CertificateIdentityExtractor.java
+++ b/vertx-auth-mtls/src/main/java/io/vertx/ext/auth/mtls/CertificateIdentityExtractor.java
@@ -18,9 +18,7 @@
 
 package io.vertx.ext.auth.mtls;
 
-import java.security.cert.Certificate;
-import java.util.List;
-
+import io.vertx.ext.auth.authentication.CertificateCredentials;
 import io.vertx.ext.auth.authentication.CredentialValidationException;
 
 /**
@@ -30,7 +28,7 @@ import io.vertx.ext.auth.authentication.CredentialValidationException;
 public interface CertificateIdentityExtractor
 {
     /**
-     * Extracts a valid identity out of {@code List<Certificate>} certificate chain. This identity can later be used
+     * Extracts a valid identity out of {@link CertificateCredentials} certificate chain. This identity can later be used
      * for authorizing user's resource level permissions. If a valid identity could not be extracted, then throws
      * {@code CredentialValidationException}
      *
@@ -41,9 +39,9 @@ public interface CertificateIdentityExtractor
      *  <li>any other fields in the certificate can be combined and be used as identifier of the certificate
      * </ul>
      *
-     * @param certificateChain certificate chain of user
+     * @param certificateCredentials certificate chain of user that is already verified
      * @return {@code String} identity string extracted from certificate, uniquely represents client
      * @throws CredentialValidationException when a valid identity cannot be extracted from certificate chain.
      */
-    String validIdentity(List<Certificate> certificateChain) throws CredentialValidationException;
+    String validIdentity(CertificateCredentials certificateCredentials) throws CredentialValidationException;
 }
diff --git a/vertx-auth-mtls/src/main/java/io/vertx/ext/auth/mtls/impl/CertificateValidatorImpl.java b/vertx-auth-mtls/src/main/java/io/vertx/ext/auth/mtls/impl/CertificateValidatorImpl.java
index 61d50628..ec55f862 100644
--- a/vertx-auth-mtls/src/main/java/io/vertx/ext/auth/mtls/impl/CertificateValidatorImpl.java
+++ b/vertx-auth-mtls/src/main/java/io/vertx/ext/auth/mtls/impl/CertificateValidatorImpl.java
@@ -18,7 +18,6 @@
 
 package io.vertx.ext.auth.mtls.impl;
 
-import java.security.cert.Certificate;
 import java.security.cert.CertificateExpiredException;
 import java.security.cert.CertificateNotYetValidException;
 import java.security.cert.X509Certificate;
@@ -61,18 +60,11 @@ public class CertificateValidatorImpl implements CertificateValidator
     public void verifyCertificate(CertificateCredentials credentials)
     {
         credentials.checkValid();
-        // First certificate in certificate chain is usually PrivateKeyEntry.
-        Certificate certificate = credentials.certificateChain().get(0);
-        if (!(certificate instanceof X509Certificate))
-        {
-            throw new CredentialValidationException("No X509Certificate found for validating");
-        }
-
-        X509Certificate castedCert = (X509Certificate) certificate;
-        validateIssuer(castedCert);
+        X509Certificate peerCertificate = credentials.peerCertificate();
+        validateIssuer(peerCertificate);
         try
         {
-            castedCert.checkValidity();
+            peerCertificate.checkValidity();
         }
         catch (CertificateExpiredException e)
         {
diff --git a/vertx-auth-mtls/src/main/java/io/vertx/ext/auth/mtls/impl/MutualTlsAuthenticationProvider.java b/vertx-auth-mtls/src/main/java/io/vertx/ext/auth/mtls/impl/MutualTlsAuthenticationProvider.java
index 50f0f204..27fbdf8c 100644
--- a/vertx-auth-mtls/src/main/java/io/vertx/ext/auth/mtls/impl/MutualTlsAuthenticationProvider.java
+++ b/vertx-auth-mtls/src/main/java/io/vertx/ext/auth/mtls/impl/MutualTlsAuthenticationProvider.java
@@ -57,7 +57,7 @@ public class MutualTlsAuthenticationProvider implements AuthenticationProvider
         try
         {
             certificateValidator.verifyCertificate(certificateCredentials);
-            String identity = identityExtractor.validIdentity(certificateCredentials.certificateChain());
+            String identity = identityExtractor.validIdentity(certificateCredentials);
             return Future.succeededFuture(User.fromName(identity));
         }
         catch (Exception e)
diff --git a/vertx-auth-mtls/src/main/java/io/vertx/ext/auth/mtls/impl/SpiffeIdentityExtractor.java b/vertx-auth-mtls/src/main/java/io/vertx/ext/auth/mtls/impl/SpiffeIdentityExtractor.java
index c10ec978..9e3bff85 100644
--- a/vertx-auth-mtls/src/main/java/io/vertx/ext/auth/mtls/impl/SpiffeIdentityExtractor.java
+++ b/vertx-auth-mtls/src/main/java/io/vertx/ext/auth/mtls/impl/SpiffeIdentityExtractor.java
@@ -24,6 +24,7 @@ import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 
+import io.vertx.ext.auth.authentication.CertificateCredentials;
 import io.vertx.ext.auth.authentication.CredentialValidationException;
 import io.vertx.ext.auth.mtls.CertificateIdentityExtractor;
 
@@ -50,16 +51,10 @@ public class SpiffeIdentityExtractor implements CertificateIdentityExtractor
     }
 
     @Override
-    public String validIdentity(List<Certificate> certificateChain) throws CredentialValidationException
+    public String validIdentity(CertificateCredentials certificateCredentials) throws CredentialValidationException
     {
-        List<X509Certificate> castedCerts = castCertsToX509(certificateChain);
-        if (castedCerts.isEmpty())
-        {
-            throw new CredentialValidationException("Certificate chain shared is empty");
-        }
-
         // First certificate in certificate chain is usually PrivateKeyEntry.
-        X509Certificate privateCert = castedCerts.get(0);
+        X509Certificate privateCert = certificateCredentials.peerCertificate();
 
         String identity = extractIdentity(privateCert);
         validateIdentity(identity);
diff --git a/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/authentication/CertificateCredentialsTest.java b/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/authentication/CertificateCredentialsTest.java
new file mode 100644
index 00000000..a7fe0b19
--- /dev/null
+++ b/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/authentication/CertificateCredentialsTest.java
@@ -0,0 +1,83 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.vertx.ext.auth.authentication;
+
+import java.security.cert.Certificate;
+import java.security.cert.X509Certificate;
+import java.util.Collections;
+import java.util.List;
+
+import org.junit.jupiter.api.Test;
+
+import io.vertx.core.http.HttpServerRequest;
+import io.vertx.ext.auth.mtls.impl.CertificateBuilder;
+
+import static org.assertj.core.api.Assertions.assertThatNoException;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
+import static org.mockito.Mockito.mock;
+
+/**
+ * Tests {@link CertificateCredentials}
+ */
+public class CertificateCredentialsTest
+{
+    @Test
+    void testValidCertificate()
+    {
+        assertThatNoException().isThrownBy(() -> createTestCredentials().checkValid());
+    }
+
+    @Test
+    void testEmptyCertificateChain()
+    {
+        List<Certificate> certificateChain = Collections.emptyList();
+        assertThatThrownBy(() -> new CertificateCredentials(certificateChain).checkValid())
+        .isInstanceOf(CredentialValidationException.class);
+    }
+
+    @Test
+    void testNonCertificateBasedConnection()
+    {
+        HttpServerRequest request = mock(HttpServerRequest.class);
+
+        assertThatThrownBy(() -> CertificateCredentials.fromHttpRequest(request))
+        .isInstanceOf(IllegalArgumentException.class)
+        .hasMessage("Could not extract certificates from request");
+    }
+
+    public static CertificateCredentials createTestCredentials()
+    {
+        return createTestCredentials("CN=Vertx Auth, OU=ssl_test, O=Vertx, L=Unknown, ST=Unknown, C=US");
+    }
+
+    public static CertificateCredentials createTestCredentials(String issuerName)
+    {
+        try
+        {
+            X509Certificate certificate = CertificateBuilder.builder()
+                                            .issuerName(issuerName)
+                                            .buildSelfSigned();
+            return new CertificateCredentials(Collections.singletonList(certificate));
+        }
+        catch (Exception e)
+        {
+            throw new RuntimeException(e);
+        }
+    }
+}
diff --git a/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/test/mtls/CertificateBuilder.java b/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/mtls/impl/CertificateBuilder.java
similarity index 99%
rename from vertx-auth-mtls/src/test/java/io/vertx/ext/auth/test/mtls/CertificateBuilder.java
rename to vertx-auth-mtls/src/test/java/io/vertx/ext/auth/mtls/impl/CertificateBuilder.java
index 5ff30e2c..153a8136 100644
--- a/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/test/mtls/CertificateBuilder.java
+++ b/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/mtls/impl/CertificateBuilder.java
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package io.vertx.ext.auth.test.mtls;
+package io.vertx.ext.auth.mtls.impl;
 
 import java.math.BigInteger;
 import java.security.GeneralSecurityException;
diff --git a/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/test/mtls/CertificateValidatorImplTest.java b/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/mtls/impl/CertificateValidatorImplTest.java
similarity index 58%
rename from vertx-auth-mtls/src/test/java/io/vertx/ext/auth/test/mtls/CertificateValidatorImplTest.java
rename to vertx-auth-mtls/src/test/java/io/vertx/ext/auth/mtls/impl/CertificateValidatorImplTest.java
index 649dc5f7..2093ce91 100644
--- a/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/test/mtls/CertificateValidatorImplTest.java
+++ b/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/mtls/impl/CertificateValidatorImplTest.java
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package io.vertx.ext.auth.test.mtls;
+package io.vertx.ext.auth.mtls.impl;
 
 import java.security.cert.Certificate;
 import java.security.cert.X509Certificate;
@@ -30,8 +30,8 @@ import org.junit.jupiter.api.Test;
 import io.vertx.ext.auth.authentication.CertificateCredentials;
 import io.vertx.ext.auth.authentication.CredentialValidationException;
 import io.vertx.ext.auth.mtls.CertificateValidator;
-import io.vertx.ext.auth.mtls.impl.CertificateValidatorImpl;
 
+import static io.vertx.ext.auth.authentication.CertificateCredentialsTest.createTestCredentials;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.mockito.Mockito.mock;
 
@@ -40,27 +40,23 @@ import static org.mockito.Mockito.mock;
  */
 public class CertificateValidatorImplTest
 {
+    private final CertificateValidator certificateValidator = CertificateValidatorImpl.builder()
+                                                                                      .trustedCNs(Collections.singleton("Vertx Auth"))
+                                                                                      .trustedIssuerOrganization("Vertx")
+                                                                                      .trustedIssuerOrganizationUnit("ssl_test")
+                                                                                      .trustedIssuerCountry("US")
+                                                                                      .build();
+
     @Test
-    public void testValidCertificateCredentials() throws Exception
+    public void testValidCertificateCredentials()
     {
-        CertificateValidator certificateValidator
-                = CertificateValidatorImpl.builder().trustedCNs(Collections.singleton("Vertx Auth"))
-                .trustedIssuerOrganization("Vertx").trustedIssuerOrganizationUnit("ssl_test")
-                .trustedIssuerCountry("US").build();
-        X509Certificate certificate
-                = CertificateBuilder.builder()
-                .issuerName("CN=Vertx Auth, OU=ssl_test, O=Vertx, L=Unknown, ST=Unknown, C=US").buildSelfSigned();
-        CertificateCredentials credentials = new CertificateCredentials(Collections.singletonList(certificate));
+        CertificateCredentials credentials = createTestCredentials();
         certificateValidator.verifyCertificate(credentials);
     }
 
     @Test
-    public void testInvalidCertificateType() throws Exception
+    public void testInvalidCertificateType()
     {
-        CertificateValidator certificateValidator
-                = CertificateValidatorImpl.builder().trustedCNs(Collections.singleton("Vertx Auth"))
-                .trustedIssuerOrganization("Vertx").trustedIssuerOrganizationUnit("ssl_test")
-                .trustedIssuerCountry("US").build();
         Certificate certificate = mock(Certificate.class);
         CertificateCredentials credentials = new CertificateCredentials(Collections.singletonList(certificate));
         assertThatThrownBy(() -> certificateValidator.verifyCertificate(credentials))
@@ -69,32 +65,24 @@ public class CertificateValidatorImplTest
     }
 
     @Test
-    public void testNonTrustedIssuer() throws Exception
+    public void testNonTrustedIssuer()
     {
-        CertificateValidator certificateValidator
-                = CertificateValidatorImpl.builder().trustedCNs(Collections.singleton("Vertx Auth"))
-                .trustedIssuerOrganization("Vertx").trustedIssuerOrganizationUnit("ssl_test")
-                .trustedIssuerCountry("US").build();
-        X509Certificate certificate
-                = CertificateBuilder.builder()
-                .issuerName("CN=Vertx Auth, OU=ssl_test, O=NonTrustedOrganization, L=Unknown, ST=Unknown, C=US").buildSelfSigned();
-        CertificateCredentials credentials = new CertificateCredentials(Collections.singletonList(certificate));
+        CertificateCredentials credentials = createTestCredentials("CN=Vertx Auth, OU=ssl_test, " +
+                                                                   "O=NonTrustedOrganization, " +
+                                                                   "L=Unknown, ST=Unknown, C=US");
         assertThatThrownBy(() -> certificateValidator.verifyCertificate(credentials))
                 .isInstanceOf(CredentialValidationException.class)
                 .hasMessage("NonTrustedOrganization attribute not trusted");
     }
 
     @Test
-    public void testInvalidIssuer() throws Exception
+    public void testInvalidIssuer()
     {
         CertificateValidator certificateValidator
                 = CertificateValidatorImpl.builder().trustedCNs(Collections.singleton("Vertx Auth"))
                 .trustedIssuerOrganization("MissingIssuerOrganization").trustedIssuerOrganizationUnit("ssl_test")
                 .trustedIssuerCountry("US").build();
-        X509Certificate certificate
-                = CertificateBuilder.builder()
-                .issuerName("CN=Vertx Auth, OU=ssl_test, L=Unknown, ST=Unknown, C=US").buildSelfSigned();
-        CertificateCredentials credentials = new CertificateCredentials(Collections.singletonList(certificate));
+        CertificateCredentials credentials = createTestCredentials("CN=Vertx Auth, OU=ssl_test, L=Unknown, ST=Unknown, C=US");
         assertThatThrownBy(() -> certificateValidator.verifyCertificate(credentials))
                 .isInstanceOf(CredentialValidationException.class)
                 .hasMessage("Expected attribute O not found");
@@ -103,10 +91,6 @@ public class CertificateValidatorImplTest
     @Test
     public void testExpiredCertificate() throws Exception
     {
-        CertificateValidator certificateValidator
-                = CertificateValidatorImpl.builder().trustedCNs(Collections.singleton("Vertx Auth"))
-                .trustedIssuerOrganization("Vertx").trustedIssuerOrganizationUnit("ssl_test")
-                .trustedIssuerCountry("US").build();
         X509Certificate certificate
                 = CertificateBuilder.builder()
                 .notAfter(Date.from(Instant.now().minus(1, ChronoUnit.DAYS)))
diff --git a/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/test/mtls/MutualTlsAuthenticationTest.java b/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/mtls/impl/MutualTlsAuthenticationTest.java
similarity index 95%
rename from vertx-auth-mtls/src/test/java/io/vertx/ext/auth/test/mtls/MutualTlsAuthenticationTest.java
rename to vertx-auth-mtls/src/test/java/io/vertx/ext/auth/mtls/impl/MutualTlsAuthenticationTest.java
index 3b2d4781..fbd79771 100644
--- a/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/test/mtls/MutualTlsAuthenticationTest.java
+++ b/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/mtls/impl/MutualTlsAuthenticationTest.java
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package io.vertx.ext.auth.test.mtls;
+package io.vertx.ext.auth.mtls.impl;
 
 import java.security.cert.Certificate;
 import java.security.cert.CertificateException;
@@ -38,10 +38,6 @@ import io.vertx.ext.auth.authentication.CertificateCredentials;
 import io.vertx.ext.auth.authentication.TokenCredentials;
 import io.vertx.ext.auth.mtls.CertificateIdentityExtractor;
 import io.vertx.ext.auth.mtls.CertificateValidator;
-import io.vertx.ext.auth.mtls.impl.AllowAllCertificateValidator;
-import io.vertx.ext.auth.mtls.impl.CertificateValidatorImpl;
-import io.vertx.ext.auth.mtls.impl.MutualTlsAuthenticationProvider;
-import io.vertx.ext.auth.mtls.impl.SpiffeIdentityExtractor;
 import io.vertx.junit5.VertxExtension;
 import io.vertx.junit5.VertxTestContext;
 
@@ -77,7 +73,7 @@ public class MutualTlsAuthenticationTest
         List<Certificate> certChain = Collections.singletonList(validCert.cert());
         CertificateCredentials credentials = new CertificateCredentials(certChain);
 
-        when(mockIdentityExtracter.validIdentity(certChain)).thenReturn("default");
+        when(mockIdentityExtracter.validIdentity(credentials)).thenReturn("default");
 
         mTlsAuth.authenticate(credentials)
                 .onFailure(res -> context.failNow("mTls should have succeeded"))
@@ -185,7 +181,7 @@ public class MutualTlsAuthenticationTest
         List<Certificate> certChain = Collections.singletonList(validCert.cert());
         CertificateCredentials credentials = new CertificateCredentials(certChain);
 
-        when(mockIdentityExtracter.validIdentity(certChain)).thenThrow(new RuntimeException("Bad Identity"));
+        when(mockIdentityExtracter.validIdentity(credentials)).thenThrow(new RuntimeException("Bad Identity"));
 
         mTlsAuth.authenticate(credentials)
                 .onSuccess(res -> context.failNow("Should have failed"))
diff --git a/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/test/mtls/SpiffeIdentityExtractorTest.java b/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/mtls/impl/SpiffeIdentityExtractorTest.java
similarity index 77%
rename from vertx-auth-mtls/src/test/java/io/vertx/ext/auth/test/mtls/SpiffeIdentityExtractorTest.java
rename to vertx-auth-mtls/src/test/java/io/vertx/ext/auth/mtls/impl/SpiffeIdentityExtractorTest.java
index c5635e4e..ae0f80b8 100644
--- a/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/test/mtls/SpiffeIdentityExtractorTest.java
+++ b/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/mtls/impl/SpiffeIdentityExtractorTest.java
@@ -16,16 +16,15 @@
  * limitations under the License.
  */
 
-package io.vertx.ext.auth.test.mtls;
+package io.vertx.ext.auth.mtls.impl;
 
 import java.security.cert.Certificate;
 import java.security.cert.X509Certificate;
-import java.util.Collections;
 
 import org.junit.jupiter.api.Test;
 
+import io.vertx.ext.auth.authentication.CertificateCredentials;
 import io.vertx.ext.auth.authentication.CredentialValidationException;
-import io.vertx.ext.auth.mtls.impl.SpiffeIdentityExtractor;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
@@ -47,15 +46,16 @@ public class SpiffeIdentityExtractorTest
                 .issuerName("CN=Vertx Auth, OU=ssl_test, O=Unknown, L=Unknown, ST=Unknown, C=Unknown")
                 .addSanUriName("spiffe://vertx.auth/unitTest/mtls")
                 .buildSelfSigned();
-        assertThat(identityExtractor.validIdentity(Collections.singletonList(certificate))).isEqualTo("spiffe://vertx.auth/unitTest/mtls");
+        assertThat(identityExtractor.validIdentity(new CertificateCredentials(certificate)))
+        .isEqualTo("spiffe://vertx.auth/unitTest/mtls");
     }
 
     @Test
     public void testDifferentCertificateType()
     {
         Certificate mockCertificate = mock(Certificate.class);
-        assertThatThrownBy(() -> identityExtractor.validIdentity(Collections.singletonList(mockCertificate)))
-                .isInstanceOf(CredentialValidationException.class);
+        assertThatThrownBy(() -> identityExtractor.validIdentity(new CertificateCredentials(mockCertificate)))
+        .isInstanceOf(CredentialValidationException.class);
     }
 
     @Test
@@ -67,9 +67,9 @@ public class SpiffeIdentityExtractorTest
                 .issuerName("CN=Vertx Auth, OU=ssl_test, O=Unknown, L=Unknown, ST=Unknown, C=Unknown")
                 .addSanUriName("randomuri://extracted/from/certificate")
                 .buildSelfSigned();
-        assertThatThrownBy(() -> identityExtractor.validIdentity(Collections.singletonList(certificate)))
-                .isInstanceOf(CredentialValidationException.class)
-                .hasMessage("Unable to extract SPIFFE identity from certificate");
+        assertThatThrownBy(() -> identityExtractor.validIdentity(new CertificateCredentials(certificate)))
+        .isInstanceOf(CredentialValidationException.class)
+        .hasMessage("Unable to extract SPIFFE identity from certificate");
     }
 
     @Test
@@ -80,9 +80,9 @@ public class SpiffeIdentityExtractorTest
                 .builder()
                 .issuerName("CN=Vertx Auth, OU=ssl_test, O=Unknown, L=Unknown, ST=Unknown, C=Unknown")
                 .buildSelfSigned();
-        assertThatThrownBy(() -> identityExtractor.validIdentity(Collections.singletonList(certificate)))
-                .isInstanceOf(CredentialValidationException.class)
-                .hasMessage("Error reading SAN of certificate");
+        assertThatThrownBy(() -> identityExtractor.validIdentity(new CertificateCredentials(certificate)))
+        .isInstanceOf(CredentialValidationException.class)
+        .hasMessage("Error reading SAN of certificate");
     }
 
     @Test
@@ -95,8 +95,8 @@ public class SpiffeIdentityExtractorTest
                 .addSanUriName("spiffe://nontrusted/unitTest/mtls")
                 .buildSelfSigned();
         SpiffeIdentityExtractor identityExtractorWithTrust = new SpiffeIdentityExtractor("vertx.auth");
-        assertThatThrownBy(() -> identityExtractorWithTrust.validIdentity(Collections.singletonList(certificate)))
-                .isInstanceOf(CredentialValidationException.class)
-                .hasMessage("Spiffe Identity domain nontrusted is not trusted");
+        assertThatThrownBy(() -> identityExtractorWithTrust.validIdentity(new CertificateCredentials(certificate)))
+        .isInstanceOf(CredentialValidationException.class)
+        .hasMessage("Spiffe Identity domain nontrusted is not trusted");
     }
 }
diff --git a/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/test/mtls/CertificateCredentialsTest.java b/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/test/mtls/CertificateCredentialsTest.java
deleted file mode 100644
index 2b156459..00000000
--- a/vertx-auth-mtls/src/test/java/io/vertx/ext/auth/test/mtls/CertificateCredentialsTest.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package io.vertx.ext.auth.test.mtls;
-
-import java.security.cert.Certificate;
-import java.util.Collections;
-import java.util.List;
-
-import org.junit.jupiter.api.Test;
-
-import io.vertx.ext.auth.authentication.CertificateCredentials;
-import io.vertx.ext.auth.authentication.CredentialValidationException;
-
-import static org.assertj.core.api.Assertions.assertThatThrownBy;
-
-/**
- * Tests {@link CertificateCredentials}
- */
-public class CertificateCredentialsTest
-{
-    @Test
-    public void testEmptyCertificateChain()
-    {
-        List<Certificate> certificateChain = Collections.emptyList();
-        assertThatThrownBy(() -> new CertificateCredentials(certificateChain).checkValid())
-                .isInstanceOf(CredentialValidationException.class);
-    }
-}
-- 
2.45.2

